import React, { useState, useEffect } from 'react';
import { Bot, Settings, Sparkles, FileText, Zap, Search, Filter, TrendingUp, Globe, Send, Edit } from 'lucide-react';
import { useAppStore } from '../store/useAppStore';
import { AIService } from '../services/aiService';
import { WordPressService } from '../services/wordPressService';
import { GenerationPrompt, Article, ArticleTopic, TrendAnalysisResult } from '../types';
import { articleTopics } from '../data/articleTopics';
import toast from 'react-hot-toast';
import { supabase } from '../services/supabaseClient';
import { customTopicsService } from '../services/customTopicsService';

// ÊúÄÊñ∞AIË®≠ÂÆö„ÇíSupabase„Åã„ÇâÂèñÂæó
async function fetchActiveAIConfig() {
  const { data, error } = await supabase
    .from('ai_configs')
    .select('*')
    .eq('is_active', true)
    .order('created_at', { ascending: false })
    .limit(1)
    .single();

  if (error) {
    console.error('AIË®≠ÂÆö„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:', error.message);
    return null;
  }
  return data;
}


export const AIGenerator: React.FC = () => {
  const { aiConfig, addArticle, setIsGenerating, isGenerating, wordPressConfigs, updateArticle } = useAppStore();
  const [selectedTopic, setSelectedTopic] = useState<ArticleTopic | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [prompt, setPrompt] = useState<GenerationPrompt>({
    topic: '',
    keywords: [],
    tone: 'professional',
    length: 'long',
    includeIntroduction: true,
    includeConclusion: true,
    includeSources: true,
    useTrendData: false
  });
  const [keywordInput, setKeywordInput] = useState('');
  const [generatedArticle, setGeneratedArticle] = useState<any>(null);
  const [isPreview, setIsPreview] = useState(false);
  const [showTopicSelection, setShowTopicSelection] = useState(true);
  const [trendData, setTrendData] = useState<TrendAnalysisResult | null>(null);
  const [isPublishing, setIsPublishing] = useState(false);
  const [selectedWordPressConfig, setSelectedWordPressConfig] = useState<string>('');
  const [publishStatus, setPublishStatus] = useState<'publish' | 'draft'>('publish');
  const [recentTopics, setRecentTopics] = useState<any[]>([]);
  const [favoriteTopics, setFavoriteTopics] = useState<any[]>([]);
  const [showCustomTopicHistory, setShowCustomTopicHistory] = useState(false);

  useEffect(() => {
    async function loadAIConfig() {
      try {
        const { data, error } = await supabase
          .from('ai_configs')
          .select('*')
          .eq('is_active', true)
          .order('created_at', { ascending: false })
          .limit(1)
          .single();

        if (error) {
          console.error('AIË®≠ÂÆö„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:', error.message);
          return;
        }

        if (data) {
          const mapped = {
            provider: data.provider,
            apiKey: data.api_key,
            model: data.model,
            temperature: data.temperature ?? 0.7,
            maxTokens: data.max_tokens ?? 4000,
          };

          useAppStore.setState({ aiConfig: mapped });
          console.log('‚úÖ Supabase„Åã„ÇâAIË®≠ÂÆö„Çí„É≠„Éº„Éâ„Åó„Åæ„Åó„Åü:', mapped);
        }
      } catch (err) {
        console.error('AIË®≠ÂÆö„É≠„Éº„Éâ‰∏≠„ÅÆ„Ç®„É©„Éº:', err);
      }
    }

    loadAIConfig();
    loadCustomTopics();
  }, []);

  const loadCustomTopics = async () => {
    try {
      const [recent, favorites] = await Promise.all([
        customTopicsService.getAllTopics('recent', 10),
        customTopicsService.getFavoriteTopics()
      ]);
      setRecentTopics(recent);
      setFavoriteTopics(favorites);
    } catch (error) {
      console.error('„Ç´„Çπ„Çø„É†„Éà„Éî„ÉÉ„ÇØ„ÅÆË™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
    }
  };

  const handleSelectCustomTopic = async (topic: any) => {
    setPrompt({
      topic: topic.topicName,
      keywords: topic.keywords || [],
      tone: topic.tone || 'professional',
      length: topic.length || 'long',
      includeIntroduction: true,
      includeConclusion: true,
      includeSources: true,
      useTrendData: false
    });
    setShowTopicSelection(false);
    setShowCustomTopicHistory(false);

    await customTopicsService.incrementUseCount(topic.id);
    await loadCustomTopics();
    toast.success(`„Äå${topic.topicName}„Äç„ÇíÈÅ∏Êäû„Åó„Åæ„Åó„Åü`);
  };

  const handleToggleFavorite = async (topicId: string) => {
    await customTopicsService.toggleFavorite(topicId);
    await loadCustomTopics();
  };


  
  // Check for pending trend data on component mount
  useEffect(() => {
    const pendingTrendData = localStorage.getItem('pendingTrendData');
    if (pendingTrendData) {
      try {
        const parsedTrendData = JSON.parse(pendingTrendData);
        setTrendData(parsedTrendData);
        setPrompt(prev => ({
          ...prev,
          topic: parsedTrendData.keyword,
          keywords: [parsedTrendData.keyword, ...parsedTrendData.relatedKeywords.slice(0, 4)],
          useTrendData: true,
          trendAnalysis: parsedTrendData
        }));
        setShowTopicSelection(false);
        localStorage.removeItem('pendingTrendData');
        toast.success('„Éà„É¨„É≥„Éâ„Éá„Éº„Çø„ÇíË®ò‰∫ãÁîüÊàê„Å´ÈÅ©Áî®„Åó„Åæ„Åó„Åü');
      } catch (error) {
        console.error('„Éà„É¨„É≥„Éâ„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
        localStorage.removeItem('pendingTrendData');
      }
    }
  }, []);

  // Set default WordPress config
  useEffect(() => {
    if (wordPressConfigs.length > 0 && !selectedWordPressConfig) {
      const activeConfig = wordPressConfigs.find(config => config.isActive);
      if (activeConfig) {
        setSelectedWordPressConfig(activeConfig.id);
      } else {
        setSelectedWordPressConfig(wordPressConfigs[0].id);
      }
    }
  }, [wordPressConfigs, selectedWordPressConfig]);

  // Filter topics based on search and category
  const filteredTopics = articleTopics.filter(topic => {
    const matchesSearch = topic.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         topic.description.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory = selectedCategory === 'all' || topic.category === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  const categories = ['all', ...Array.from(new Set(articleTopics.map(topic => topic.category)))];

  const handleTopicSelect = (topic: ArticleTopic) => {
    setSelectedTopic(topic);
    setPrompt(prev => ({
      ...prev,
      topicId: topic.id,
      topic: topic.name,
      keywords: [...topic.defaultKeywords]
    }));
    setShowTopicSelection(false);
  };

  const handleKeywordAdd = () => {
    if (keywordInput.trim() && !prompt.keywords.includes(keywordInput.trim())) {
      setPrompt(prev => ({
        ...prev,
        keywords: [...prev.keywords, keywordInput.trim()]
      }));
      setKeywordInput('');
    }
  };

  const handleKeywordRemove = (keyword: string) => {
    setPrompt(prev => ({
      ...prev,
      keywords: prev.keywords.filter(k => k !== keyword)
    }));
  };

const handleGenerate = async () => {
  if (!aiConfig) {
    toast.error('AIË®≠ÂÆö„ÇíÂÆå‰∫Ü„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
    return;
  }

  // „Éà„Éî„ÉÉ„ÇØÊú™ÂÖ•Âäõ„ÉÅ„Çß„ÉÉ„ÇØ
  if (!prompt.topic.trim()) {
    toast.error('Ë®ò‰∫ã„ÅÆ„Éà„Éî„ÉÉ„ÇØ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
    return;
  }

  try {
    setIsGenerating(true);
    const aiService = new AIService();

    console.log("üîç Ê∏°„Åï„Çå„ÇãaiConfig:", aiConfig);


    // üîπ „Åì„Åì„ÅßÊúÄÊñ∞„ÅÆprompt„Çí„Äå„É≠„Éº„Ç´„É´Â§âÊï∞„Äç„Å®„Åó„Å¶Âõ∫ÂÆö
    const generationPrompt: GenerationPrompt = {
      topic: prompt.topic,
      keywords: [...prompt.keywords],
      tone: prompt.tone,
      length: prompt.length,
      includeIntroduction: prompt.includeIntroduction,
      includeConclusion: prompt.includeConclusion,
      includeSources: prompt.includeSources,
      useTrendData: prompt.useTrendData || false,
    };

    toast.loading('AIË®ò‰∫ã„ÇíÁîüÊàê‰∏≠...', { duration: 2000 });

    // üîπ „É≠„Éº„Ç´„É´Â§âÊï∞„ÇíÊòéÁ§∫ÁöÑ„Å´Ê∏°„Åô
    const result = await aiService.generateArticle(generationPrompt);

    setGeneratedArticle(result);
    setIsPreview(true);
    toast.success('Ë®ò‰∫ã„ÅåÁîüÊàê„Åï„Çå„Åæ„Åó„ÅüÔºÅ');
  } catch (error) {
    console.error('Ë®ò‰∫ãÁîüÊàê„Ç®„É©„Éº:', error);
    toast.error('Ë®ò‰∫ãÁîüÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
  } finally {
    setIsGenerating(false);
  }
};

  
  const handleSaveArticle = async () => {
    if (!generatedArticle || !selectedWordPressConfig) {
      toast.error('WordPressË®≠ÂÆö„ÅåÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
      return;
    }

    const wordPressConfig = wordPressConfigs.find(config => config.id === selectedWordPressConfig);
    if (!wordPressConfig) {
      toast.error('ÈÅ∏Êäû„Åï„Çå„ÅüWordPressË®≠ÂÆö„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
      return;
    }

    try {
      setIsPublishing(true);

      const article: Article = {
        id: '',
        title: generatedArticle.title,
        content: generatedArticle.content,
        excerpt: generatedArticle.excerpt || '',
        keywords: generatedArticle.keywords || prompt.keywords,
        category: selectedTopic?.category || trendData?.keyword || 'AIÊäÄË°ì',
        status: 'draft',
        tone: prompt.tone,
        length: prompt.length,
        aiProvider: aiConfig?.provider || '',
        aiModel: aiConfig?.model || '',
        seoScore: generatedArticle.seoScore || 0,
        readingTime: generatedArticle.readingTime || 0,
        wordCount: generatedArticle.content?.length || 0,
        trendData: trendData || {},
        generatedAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      };

      const wordPressService = new WordPressService();
      await wordPressService.loadActiveConfig();

      toast.loading('WordPress‰∏ãÊõ∏„Åç‰øùÂ≠ò‰∏≠...', { duration: 3000 });

      const publishResult = await wordPressService.publishArticle(article, 'draft');

      if (publishResult.success) {
        if (prompt.topic && !selectedTopic) {
          await customTopicsService.findOrCreateTopic(prompt.topic, {
            keywords: prompt.keywords,
            tone: prompt.tone,
            length: prompt.length,
            category: article.category
          });
        }

        toast.success(`Ë®ò‰∫ã„Äå${article.title}„Äç„ÇíWordPress„Å´‰∏ãÊõ∏„Åç‰øùÂ≠ò„Åó„Åæ„Åó„ÅüÔºÅ`);

        setGeneratedArticle(null);
        setIsPreview(false);
        setShowTopicSelection(true);
        setSelectedTopic(null);
        setTrendData(null);

        setPrompt({
          topic: '',
          keywords: [],
          tone: 'professional',
          length: 'long',
          includeIntroduction: true,
          includeConclusion: true,
          includeSources: true,
          useTrendData: false
        });
      } else {
        toast.error(`WordPress‰∏ãÊõ∏„Åç‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${publishResult.error}`);
      }
    } catch (error) {
      console.error('WordPress‰∏ãÊõ∏„Åç‰øùÂ≠ò„Ç®„É©„Éº:', error);
      toast.error('WordPress‰∏ãÊõ∏„Åç‰øùÂ≠ò„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
    } finally {
      setIsPublishing(false);
    }
  };

  const handlePublishToWordPress = async () => {
    if (!generatedArticle || !selectedWordPressConfig) {
      toast.error('Ë®ò‰∫ã„Åæ„Åü„ÅØWordPressË®≠ÂÆö„ÅåÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
      return;
    }

    const wordPressConfig = wordPressConfigs.find(config => config.id === selectedWordPressConfig);
    if (!wordPressConfig) {
      toast.error('ÈÅ∏Êäû„Åï„Çå„ÅüWordPressË®≠ÂÆö„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
      return;
    }

    try {
      setIsPublishing(true);

      const article: Article = {
        id: '',
        title: generatedArticle.title,
        content: generatedArticle.content,
        excerpt: generatedArticle.excerpt || '',
        keywords: generatedArticle.keywords || prompt.keywords,
        category: selectedTopic?.category || trendData?.keyword || 'AIÊäÄË°ì',
        status: publishStatus === 'publish' ? 'published' : 'draft',
        tone: prompt.tone,
        length: prompt.length,
        aiProvider: aiConfig?.provider || '',
        aiModel: aiConfig?.model || '',
        seoScore: generatedArticle.seoScore || 0,
        readingTime: generatedArticle.readingTime || 0,
        wordCount: generatedArticle.content?.length || 0,
        trendData: trendData || {},
        generatedAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      };

      const wordPressService = new WordPressService();
      await wordPressService.loadActiveConfig();

      const statusText = publishStatus === 'publish' ? 'WordPressÊäïÁ®ø‰∏≠...' : 'WordPress‰∏ãÊõ∏„Åç‰øùÂ≠ò‰∏≠...';
      toast.loading(statusText, { duration: 3000 });

      const publishResult = await wordPressService.publishArticle(article, publishStatus);

      if (publishResult.success) {
        if (prompt.topic && !selectedTopic) {
          await customTopicsService.findOrCreateTopic(prompt.topic, {
            keywords: prompt.keywords,
            tone: prompt.tone,
            length: prompt.length,
            category: article.category
          });
        }

        const successMessage = publishStatus === 'publish'
          ? `Ë®ò‰∫ã„Äå${article.title}„Äç„Çí${wordPressConfig.name}„Å´ÂÖ¨Èñã„Åó„Åæ„Åó„ÅüÔºÅ`
          : `Ë®ò‰∫ã„Äå${article.title}„Äç„Çí${wordPressConfig.name}„Å´‰∏ãÊõ∏„Åç‰øùÂ≠ò„Åó„Åæ„Åó„ÅüÔºÅ`;

        toast.success(successMessage);

        setGeneratedArticle(null);
        setIsPreview(false);
        setShowTopicSelection(true);
        setSelectedTopic(null);
        setTrendData(null);

        setPrompt({
          topic: '',
          keywords: [],
          tone: 'professional',
          length: 'long',
          includeIntroduction: true,
          includeConclusion: true,
          includeSources: true,
          useTrendData: false
        });
      } else {
        toast.error(`WordPressÊäïÁ®ø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${publishResult.error}`);
      }
    } catch (error) {
      console.error('WordPressÊäïÁ®ø„Ç®„É©„Éº:', error);
      toast.error('WordPressÊäïÁ®ø„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
    } finally {
      setIsPublishing(false);
    }
  };

  const handleBackToTopics = () => {
    setShowTopicSelection(true);
    setSelectedTopic(null);
    setTrendData(null);
    setPrompt({
      topic: '',
      keywords: [],
      tone: 'professional',
      length: 'long',
      includeIntroduction: true,
      includeConclusion: true,
      includeSources: true,
      useTrendData: false
    });
  };

  if (isPreview && generatedArticle) {
    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <Bot className="w-8 h-8 text-blue-600" />
            <div>
              <h2 className="text-2xl font-bold text-gray-900">ÁîüÊàê„Åï„Çå„ÅüË®ò‰∫ã</h2>
              <p className="text-gray-600">Ë®ò‰∫ã„Çí„Éó„É¨„Éì„É•„Éº„Åó„Å¶‰øùÂ≠ò„Åæ„Åü„ÅØÊäïÁ®ø„Åó„Å¶„Åè„Å†„Åï„ÅÑ</p>
            </div>
          </div>
          <div className="flex space-x-3">
            <button
              onClick={() => setIsPreview(false)}
              className="btn-secondary"
            >
              Êàª„Çã
            </button>
            <button
              onClick={handleSaveArticle}
              disabled={!selectedWordPressConfig}
              className="btn-secondary disabled:opacity-50 disabled:cursor-not-allowed"
            >
              WordPress‰∏ãÊõ∏„Åç‰øùÂ≠ò
            </button>
          </div>
        </div>

        {/* WordPress Publishing Section */}
        {wordPressConfigs.length > 0 && (
          <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center space-x-2">
              <Globe className="w-5 h-5 text-blue-600" />
              <span>WordPressÊäïÁ®ø</span>
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ÊäïÁ®øÂÖàWordPress
                </label>
                <select
                  value={selectedWordPressConfig}
                  onChange={(e) => setSelectedWordPressConfig(e.target.value)}
                  className="input-field"
                >
                  {wordPressConfigs.map((config) => (
                    <option key={config.id} value={config.id}>
                      {config.name} {config.isActive && '(„É°„Ç§„É≥)'}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ÊäïÁ®øÁä∂ÊÖã
                </label>
                <select
                  value={publishStatus}
                  onChange={(e) => setPublishStatus(e.target.value as 'publish' | 'draft')}
                  className="input-field"
                >
                  <option value="publish">ÂÖ¨Èñã</option>
                  <option value="draft">‰∏ãÊõ∏„Åç</option>
                </select>
              </div>

              <div className="flex items-end">
                <button
                  onClick={handlePublishToWordPress}
                  disabled={isPublishing || !selectedWordPressConfig}
                  className="btn-primary w-full flex items-center justify-center space-x-2 disabled:opacity-50"
                >
                  {isPublishing ? (
                    <>
                      <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                      <span>{publishStatus === 'publish' ? 'ÊäïÁ®ø‰∏≠...' : '‰øùÂ≠ò‰∏≠...'}</span>
                    </>
                  ) : (
                    <>
                      {publishStatus === 'publish' ? (
                        <Send className="w-4 h-4" />
                      ) : (
                        <Edit className="w-4 h-4" />
                      )}
                      <span>{publishStatus === 'publish' ? 'WordPress„Å´ÂÖ¨Èñã' : 'WordPress„Å´‰∏ãÊõ∏„Åç‰øùÂ≠ò'}</span>
                    </>
                  )}
                </button>
              </div>
            </div>

            <div className={`p-3 rounded-lg border ${
              publishStatus === 'publish' 
                ? 'border-green-200 bg-green-50' 
                : 'border-blue-200 bg-blue-50'
            }`}>
              <p className={`text-sm ${
                publishStatus === 'publish' ? 'text-green-800' : 'text-blue-800'
              }`}>
                {publishStatus === 'publish' 
                  ? 'Ë®ò‰∫ã„ÅØÂç≥Â∫ß„Å´WordPress„Å´ÂÖ¨Èñã„Åï„Çå„ÄÅË™≠ËÄÖ„ÅåÈñ≤Ë¶ß„Åß„Åç„ÇãÁä∂ÊÖã„Å´„Å™„Çä„Åæ„Åô„ÄÇ'
                  : 'Ë®ò‰∫ã„ÅØWordPress„Å´‰∏ãÊõ∏„Åç„Å®„Åó„Å¶‰øùÂ≠ò„Åï„Çå„ÄÅÁÆ°ÁêÜÁîªÈù¢„Åã„ÇâÊâãÂãï„ÅßÂÖ¨Èñã„Åß„Åç„Åæ„Åô„ÄÇ'
                }
              </p>
            </div>
          </div>
        )}

        {wordPressConfigs.length === 0 && (
          <div className="bg-yellow-50 border border-yellow-200 rounded-xl p-6">
            <div className="flex items-center space-x-2">
              <Globe className="w-5 h-5 text-yellow-600" />
              <h3 className="font-semibold text-yellow-900">WordPressË®≠ÂÆö„ÅåÂøÖË¶Å</h3>
            </div>
            <p className="text-yellow-800 text-sm mt-2">
              Ë®ò‰∫ã„ÇíWordPress„Å´ÊäïÁ®ø„Åô„Çã„Å´„ÅØ„ÄÅWordPressË®≠ÂÆö„Éö„Éº„Ç∏„ÅßÊäïÁ®øÂÖà„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
            </p>
          </div>
        )}

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-2">
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <h1 className="text-3xl font-bold text-gray-900 mb-4">
                {generatedArticle.title}
              </h1>
              <div className="prose prose-lg max-w-none">
                <div 
                  className="whitespace-pre-wrap text-gray-700 leading-relaxed"
                  dangerouslySetInnerHTML={{ __html: generatedArticle.content }}
                />
              </div>
            </div>
          </div>

          <div className="space-y-6">
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <h3 className="font-semibold text-gray-900 mb-4">Ë®ò‰∫ãÊÉÖÂ†±</h3>
              <div className="space-y-3">
                <div>
                  <label className="text-sm font-medium text-gray-700">ÊñáÂ≠óÊï∞</label>
                  <p className="text-lg font-semibold text-blue-600">
                    {generatedArticle.content.length.toLocaleString()}ÊñáÂ≠ó
                  </p>
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-700">Ë™≠‰∫ÜÊôÇÈñì</label>
                  <p className="text-lg font-semibold text-green-600">
                    Á¥Ñ{generatedArticle.readingTime}ÂàÜ
                  </p>
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-700">SEO„Çπ„Ç≥„Ç¢</label>
                  <p className="text-lg font-semibold text-purple-600">
                    {generatedArticle.seoScore}ÁÇπ
                  </p>
                </div>
              </div>
            </div>

            {trendData && (
              <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                <h3 className="font-semibold text-gray-900 mb-4 flex items-center space-x-2">
                  <TrendingUp className="w-5 h-5 text-blue-600" />
                  <span>„Éà„É¨„É≥„Éâ„Éá„Éº„Çø</span>
                </h3>
                <div className="space-y-3">
                  <div>
                    <label className="text-sm font-medium text-gray-700">„Éà„É¨„É≥„Éâ„Çπ„Ç≥„Ç¢</label>
                    <p className="text-lg font-semibold text-blue-600">
                      {trendData.trendScore}/100
                    </p>
                  </div>
                  <div>
                    <label className="text-sm font-medium text-gray-700">ÊúàÈñìÊ§úÁ¥¢Êï∞</label>
                    <p className="text-lg font-semibold text-green-600">
                      {trendData.searchVolume.toLocaleString()}
                    </p>
                  </div>
                  <div>
                    <label className="text-sm font-medium text-gray-700">Á´∂ÂêàÂ∫¶</label>
                    <p className={`text-lg font-semibold ${
                      trendData.competition === 'low' ? 'text-green-600' :
                      trendData.competition === 'medium' ? 'text-yellow-600' : 'text-red-600'
                    }`}>
                      {trendData.competition.toUpperCase()}
                    </p>
                  </div>
                </div>
              </div>
            )}

            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <h3 className="font-semibold text-gray-900 mb-4">„Ç≠„Éº„ÉØ„Éº„Éâ</h3>
              <div className="flex flex-wrap gap-2">
                {generatedArticle.keywords.map((keyword: string, index: number) => (
                  <span
                    key={index}
                    className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm font-medium"
                  >
                    {keyword}
                  </span>
                ))}
              </div>
            </div>

            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <h3 className="font-semibold text-gray-900 mb-4">Ë®ò‰∫ãÊ¶ÇË¶Å</h3>
              <p className="text-gray-700 text-sm leading-relaxed">
                {generatedArticle.excerpt}
              </p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (showTopicSelection) {
    return (
      <div className="space-y-6">
        <div className="flex items-center space-x-3">
          <Bot className="w-8 h-8 text-blue-600" />
          <div>
            <h2 className="text-2xl font-bold text-gray-900">Ë®ò‰∫ã„Éà„Éî„ÉÉ„ÇØÈÅ∏Êäû</h2>
            <p className="text-gray-600">ÁîüÊàê„Åó„Åü„ÅÑË®ò‰∫ã„ÅÆ„Éà„Éî„ÉÉ„ÇØ„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ</p>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex flex-col md:flex-row gap-4 mb-4">
            <div className="flex-1">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                <input
                  type="text"
                  placeholder="„Éà„Éî„ÉÉ„ÇØ„ÇíÊ§úÁ¥¢..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10 input-field"
                />
              </div>
            </div>
            <div className="md:w-64">
              <select
                value={selectedCategory}
                onChange={(e) => setSelectedCategory(e.target.value)}
                className="input-field"
              >
                {categories.map(category => (
                  <option key={category} value={category}>
                    {category === 'all' ? '„Åô„Åπ„Å¶„ÅÆ„Ç´„ÉÜ„Ç¥„É™' : category}
                  </option>
                ))}
              </select>
            </div>
            <button
              onClick={() => setShowCustomTopicHistory(!showCustomTopicHistory)}
              className="btn-secondary flex items-center gap-2"
            >
              <FileText className="w-5 h-5" />
              Â±•Ê≠¥„Åã„ÇâÈÅ∏Êäû
            </button>
          </div>

          {showCustomTopicHistory && (recentTopics.length > 0 || favoriteTopics.length > 0) && (
            <div className="border-t pt-4 space-y-4">
              {favoriteTopics.length > 0 && (
                <div>
                  <h3 className="text-sm font-semibold text-gray-700 mb-2 flex items-center gap-2">
                    <span className="text-yellow-500">‚òÖ</span>
                    „ÅäÊ∞ó„Å´ÂÖ•„Çä
                  </h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                    {favoriteTopics.map(topic => (
                      <div
                        key={topic.id}
                        className="flex items-center justify-between p-3 bg-yellow-50 border border-yellow-200 rounded-lg hover:bg-yellow-100 transition-colors"
                      >
                        <button
                          onClick={() => handleSelectCustomTopic(topic)}
                          className="flex-1 text-left"
                        >
                          <div className="font-medium text-gray-900">{topic.topicName}</div>
                          <div className="text-xs text-gray-600 mt-1">
                            {topic.useCount}Âõû‰ΩøÁî® „Éª {topic.keywords.length}„Ç≠„Éº„ÉØ„Éº„Éâ
                          </div>
                        </button>
                        <button
                          onClick={(e) => {
                            e.stopPropagation();
                            handleToggleFavorite(topic.id);
                          }}
                          className="ml-2 text-yellow-500 hover:text-yellow-600"
                        >
                          ‚òÖ
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {recentTopics.length > 0 && (
                <div>
                  <h3 className="text-sm font-semibold text-gray-700 mb-2">ÊúÄËøë‰ΩøÁî®„Åó„Åü„Éà„Éî„ÉÉ„ÇØ</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2">
                    {recentTopics.map(topic => (
                      <div
                        key={topic.id}
                        className="flex items-center justify-between p-3 bg-gray-50 border border-gray-200 rounded-lg hover:bg-gray-100 transition-colors"
                      >
                        <button
                          onClick={() => handleSelectCustomTopic(topic)}
                          className="flex-1 text-left"
                        >
                          <div className="font-medium text-gray-900 text-sm">{topic.topicName}</div>
                          <div className="text-xs text-gray-600 mt-1">
                            {topic.useCount}Âõû‰ΩøÁî®
                          </div>
                        </button>
                        <button
                          onClick={(e) => {
                            e.stopPropagation();
                            handleToggleFavorite(topic.id);
                          }}
                          className={`ml-2 ${topic.isFavorite ? 'text-yellow-500' : 'text-gray-300'} hover:text-yellow-500`}
                        >
                          ‚òÖ
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          )}
        </div>

        {/* Topic Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredTopics.map((topic) => (
            <div
              key={topic.id}
              onClick={() => handleTopicSelect(topic)}
              className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 cursor-pointer hover:shadow-lg hover:border-blue-300 transition-all duration-200 group"
            >
              <div className="flex items-start space-x-4">
                <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center group-hover:bg-blue-200 transition-colors">
                  <FileText className="w-6 h-6 text-blue-600" />
                </div>
                <div className="flex-1">
                  <h3 className="font-semibold text-gray-900 mb-2 group-hover:text-blue-600 transition-colors">
                    {topic.name}
                  </h3>
                  <p className="text-sm text-gray-600 mb-3 leading-relaxed">
                    {topic.description}
                  </p>
                  <div className="flex items-center justify-between">
                    <span className="text-xs font-medium text-blue-600 bg-blue-50 px-2 py-1 rounded-full">
                      {topic.category}
                    </span>
                    <span className="text-xs text-gray-500">
                      {topic.defaultKeywords.length}ÂÄã„ÅÆ„Ç≠„Éº„ÉØ„Éº„Éâ
                    </span>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>

        {filteredTopics.length === 0 && (
          <div className="text-center py-12">
            <Search className="w-12 h-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">Ë©≤ÂΩì„Åô„Çã„Éà„Éî„ÉÉ„ÇØ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì</h3>
            <p className="text-gray-600">Ê§úÁ¥¢Êù°‰ª∂„ÇíÂ§âÊõ¥„Åó„Å¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ</p>
          </div>
        )}

        {/* Custom Topic Option */}
        <div className="bg-gradient-to-r from-purple-50 to-blue-50 rounded-xl border border-purple-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <h3 className="font-semibold text-gray-900 mb-2">„Ç´„Çπ„Çø„É†„Éà„Éî„ÉÉ„ÇØ</h3>
              <p className="text-gray-600">Áã¨Ëá™„ÅÆ„Éà„Éî„ÉÉ„ÇØ„ÅßË®ò‰∫ã„ÇíÁîüÊàê„Åó„Åü„ÅÑÂ†¥Âêà</p>
            </div>
            <button
              onClick={() => setShowTopicSelection(false)}
              className="btn-primary flex items-center space-x-2"
            >
              <Sparkles className="w-4 h-4" />
              <span>„Ç´„Çπ„Çø„É†‰ΩúÊàê</span>
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-3">
          <Bot className="w-8 h-8 text-blue-600" />
          <div>
            <h2 className="text-2xl font-bold text-gray-900">AIË®ò‰∫ãÁîüÊàê</h2>
            <p className="text-gray-600">
              {selectedTopic ? `ÈÅ∏Êäû‰∏≠: ${selectedTopic.name}` : 
               trendData ? `„Éà„É¨„É≥„ÉâÂàÜÊûê: ${trendData.keyword}` : 
               'AI„Çí‰Ωø„Å£„Å¶È´òÂìÅË≥™„Å™Ë®ò‰∫ã„ÇíËá™ÂãïÁîüÊàê„Åó„Åæ„Åô'}
            </p>
          </div>
        </div>
        <button
          onClick={handleBackToTopics}
          className="btn-secondary"
        >
          „Éà„Éî„ÉÉ„ÇØÈÅ∏Êäû„Å´Êàª„Çã
        </button>
      </div>

      {!aiConfig && (
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
          <div className="flex items-center space-x-2">
            <Settings className="w-5 h-5 text-yellow-600" />
            <p className="text-yellow-800 font-medium">
              AIË®≠ÂÆö„ÅåÂøÖË¶Å„Åß„Åô„ÄÇË®≠ÂÆö„Éö„Éº„Ç∏„ÅßAPI„Ç≠„Éº„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
            </p>
          </div>
        </div>
      )}

      {/* Trend Data Display */}
      {trendData && (
        <div className="bg-gradient-to-r from-blue-50 to-green-50 border border-blue-200 rounded-xl p-6">
          <div className="flex items-start space-x-4">
            <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
              <TrendingUp className="w-6 h-6 text-blue-600" />
            </div>
            <div className="flex-1">
              <h3 className="font-semibold text-blue-900 mb-2">„Éà„É¨„É≥„Éâ„Éá„Éº„Çø„ÇíÊ¥ªÁî®„Åó„ÅüË®ò‰∫ãÁîüÊàê</h3>
              <p className="text-blue-800 text-sm mb-3">
                „Ç≠„Éº„ÉØ„Éº„Éâ„Äå{trendData.keyword}„Äç„ÅÆ„Éà„É¨„É≥„ÉâÂàÜÊûêÁµêÊûú„ÇíË®ò‰∫ãÁîüÊàê„Å´Ê¥ªÁî®„Åó„Åæ„Åô
              </p>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div className="bg-white rounded-lg p-3">
                  <div className="text-sm text-gray-600">„Éà„É¨„É≥„Éâ„Çπ„Ç≥„Ç¢</div>
                  <div className="text-lg font-bold text-blue-600">{trendData.trendScore}</div>
                </div>
                <div className="bg-white rounded-lg p-3">
                  <div className="text-sm text-gray-600">ÊúàÈñìÊ§úÁ¥¢Êï∞</div>
                  <div className="text-lg font-bold text-green-600">{trendData.searchVolume.toLocaleString()}</div>
                </div>
                <div className="bg-white rounded-lg p-3">
                  <div className="text-sm text-gray-600">Á´∂ÂêàÂ∫¶</div>
                  <div className={`text-lg font-bold ${
                    trendData.competition === 'low' ? 'text-green-600' :
                    trendData.competition === 'medium' ? 'text-yellow-600' : 'text-red-600'
                  }`}>
                    {trendData.competition.toUpperCase()}
                  </div>
                </div>
                <div className="bg-white rounded-lg p-3">
                  <div className="text-sm text-gray-600">SEOÊ©ü‰ºö</div>
                  <div className="text-lg font-bold text-purple-600">{trendData.seoData.opportunity}</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {selectedTopic && (
        <div className="bg-blue-50 border border-blue-200 rounded-xl p-6">
          <div className="flex items-start space-x-4">
            <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
              <FileText className="w-6 h-6 text-blue-600" />
            </div>
            <div className="flex-1">
              <h3 className="font-semibold text-blue-900 mb-2">{selectedTopic.name}</h3>
              <p className="text-blue-800 text-sm mb-3">{selectedTopic.description}</p>
              <div className="flex flex-wrap gap-2">
                {selectedTopic.defaultKeywords.map((keyword, index) => (
                  <span
                    key={index}
                    className="px-2 py-1 bg-blue-200 text-blue-800 rounded-full text-xs font-medium"
                  >
                    {keyword}
                  </span>
                ))}
              </div>
            </div>
          </div>
        </div>
      )}

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-6">Ë®ò‰∫ãÁîüÊàêË®≠ÂÆö</h3>
          
          <div className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Ë®ò‰∫ã„ÅÆ„Éà„Éî„ÉÉ„ÇØ
              </label>
              <input
                type="text"
                value={prompt.topic}
                onChange={(e) => setPrompt(prev => ({ ...prev, topic: e.target.value }))}
                placeholder="‰æã: Ê©üÊ¢∞Â≠¶Áøí„ÅÆÊúÄÊñ∞ÂãïÂêë"
                className="input-field"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                „Ç≠„Éº„ÉØ„Éº„Éâ
              </label>
              <div className="flex space-x-2 mb-3">
                <input
                  type="text"
                  value={keywordInput}
                  onChange={(e) => setKeywordInput(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && handleKeywordAdd()}
                  placeholder="„Ç≠„Éº„ÉØ„Éº„Éâ„ÇíÂÖ•Âäõ"
                  className="input-field"
                />
                <button
                  onClick={handleKeywordAdd}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  ËøΩÂä†
                </button>
              </div>
              <div className="flex flex-wrap gap-2">
                {prompt.keywords.map((keyword, index) => (
                  <span
                    key={index}
                    className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm font-medium flex items-center space-x-1"
                  >
                    <span>{keyword}</span>
                    <button
                      onClick={() => handleKeywordRemove(keyword)}
                      className="text-blue-600 hover:text-blue-800"
                    >
                      √ó
                    </button>
                  </span>
                ))}
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                ÊñáÁ´†„ÅÆ„Éà„Éº„É≥
              </label>
              <select
                value={prompt.tone}
                onChange={(e) => setPrompt(prev => ({ ...prev, tone: e.target.value as any }))}
                className="input-field"
              >
                <option value="professional">„Éó„É≠„Éï„Çß„ÉÉ„Ç∑„Éß„Éä„É´</option>
                <option value="casual">„Ç´„Ç∏„É•„Ç¢„É´</option>
                <option value="technical">ÊäÄË°ìÁöÑ</option>
                <option value="friendly">Ë¶™„Åó„Åø„ÇÑ„Åô„ÅÑ</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Ë®ò‰∫ã„ÅÆÈï∑„Åï
              </label>
              <select
                value={prompt.length}
                onChange={(e) => setPrompt(prev => ({ ...prev, length: e.target.value as any }))}
                className="input-field"
              >
                <option value="short">Áü≠„ÅÑ (1,000-2,000ÊñáÂ≠ó)</option>
                <option value="medium">‰∏≠Á®ãÂ∫¶ (2,000-4,000ÊñáÂ≠ó)</option>
                <option value="long">Èï∑„ÅÑ (4,000-6,000ÊñáÂ≠ó)</option>
              </select>
            </div>

            <div className="space-y-3">
              <label className="block text-sm font-medium text-gray-700">
                Âê´„ÇÅ„ÇãË¶ÅÁ¥†
              </label>
              <div className="space-y-2">
                <label className="flex items-center">
                  <input
                    type="checkbox"
                    checked={prompt.includeIntroduction}
                    onChange={(e) => setPrompt(prev => ({ ...prev, includeIntroduction: e.target.checked }))}
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                  <span className="ml-2 text-sm text-gray-700">Â∞éÂÖ•ÈÉ®ÂàÜ</span>
                </label>
                <label className="flex items-center">
                  <input
                    type="checkbox"
                    checked={prompt.includeConclusion}
                    onChange={(e) => setPrompt(prev => ({ ...prev, includeConclusion: e.target.checked }))}
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                  <span className="ml-2 text-sm text-gray-700">„Åæ„Å®„ÇÅ</span>
                </label>
                <label className="flex items-center">
                  <input
                    type="checkbox"
                    checked={prompt.includeSources}
                    onChange={(e) => setPrompt(prev => ({ ...prev, includeSources: e.target.checked }))}
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                  <span className="ml-2 text-sm text-gray-700">ÂèÇËÄÉÊñáÁåÆ</span>
                </label>
                {trendData && (
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={prompt.useTrendData}
                      onChange={(e) => setPrompt(prev => ({ ...prev, useTrendData: e.target.checked }))}
                      className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    />
                    <span className="ml-2 text-sm text-gray-700">„Éà„É¨„É≥„Éâ„Éá„Éº„Çø„ÇíÊ¥ªÁî®</span>
                  </label>
                )}
              </div>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-6">ÁîüÊàê„Éó„É¨„Éì„É•„Éº</h3>
          
          <div className="space-y-4">
            <div className="p-4 bg-gray-50 rounded-lg">
              <h4 className="font-medium text-gray-900 mb-2">‰∫àÊÉ≥„Åï„Çå„ÇãË®ò‰∫ãÊßãÊàê</h4>
              <ul className="text-sm text-gray-600 space-y-1">
                {prompt.includeIntroduction && <li>‚Ä¢ „ÅØ„Åò„ÇÅ„Å´</li>}
                <li>‚Ä¢ {prompt.topic}„ÅÆÂü∫Êú¨Ê¶ÇÂøµ</li>
                <li>‚Ä¢ ÊäÄË°ìÁöÑ„Å™Ë©≥Á¥∞</li>
                <li>‚Ä¢ ÂÆüÈöõ„ÅÆÂøúÁî®‰∫ã‰æã</li>
                <li>‚Ä¢ Ë™≤È°å„Å®Ëß£Ê±∫Á≠ñ</li>
                <li>‚Ä¢ ÊúÄÊñ∞„Éà„É¨„É≥„Éâ„Å®Â∞ÜÊù•Â±ïÊúõ</li>
                {prompt.includeConclusion && <li>‚Ä¢ „Åæ„Å®„ÇÅ</li>}
                {prompt.includeSources && <li>‚Ä¢ ÂèÇËÄÉÊñáÁåÆ</li>}
              </ul>
            </div>

            <div className="p-4 bg-blue-50 rounded-lg">
              <h4 className="font-medium text-blue-900 mb-2">ÁîüÊàêË®≠ÂÆö</h4>
              <div className="text-sm text-blue-800 space-y-1">
                <p>„Éà„Éº„É≥: {prompt.tone === 'professional' ? '„Éó„É≠„Éï„Çß„ÉÉ„Ç∑„Éß„Éä„É´' : 
                           prompt.tone === 'casual' ? '„Ç´„Ç∏„É•„Ç¢„É´' : 
                           prompt.tone === 'technical' ? 'ÊäÄË°ìÁöÑ' : 'Ë¶™„Åó„Åø„ÇÑ„Åô„ÅÑ'}</p>
                <p>Èï∑„Åï: {prompt.length === 'short' ? 'Áü≠„ÅÑ' : 
                         prompt.length === 'medium' ? '‰∏≠Á®ãÂ∫¶' : 'Èï∑„ÅÑ'}</p>
                <p>„Ç≠„Éº„ÉØ„Éº„ÉâÊï∞: {prompt.keywords.length}ÂÄã</p>
                {trendData && prompt.useTrendData && (
                  <p>„Éà„É¨„É≥„Éâ„Éá„Éº„Çø: Ê¥ªÁî®‰∏≠</p>
                )}
              </div>
            </div>

            {trendData && prompt.useTrendData && (
              <div className="p-4 bg-green-50 rounded-lg">
                <h4 className="font-medium text-green-900 mb-2">„Éà„É¨„É≥„ÉâÊúÄÈÅ©Âåñ</h4>
                <div className="text-sm text-green-800 space-y-1">
                  <p>‚Ä¢ Ë©±È°åÊÄß„ÅÆÈ´ò„ÅÑ„Ç≠„Éº„ÉØ„Éº„Éâ„ÇíÊ¥ªÁî®</p>
                  <p>‚Ä¢ Á´∂ÂêàÂàÜÊûê„Å´Âü∫„Å•„ÅèÂ∑ÆÂà•Âåñ</p>
                  <p>‚Ä¢ SEOÊúÄÈÅ©Âåñ„Åï„Çå„ÅüÊßãÊàê</p>
                  <p>‚Ä¢ „É¶„Éº„Ç∂„Éº„ÅÆÊ§úÁ¥¢ÊÑèÂõ≥„Å´ÂØæÂøú</p>
                </div>
              </div>
            )}

            <button
              onClick={handleGenerate}
              disabled={isGenerating || !aiConfig || !prompt.topic.trim()}
              className="w-full btn-primary flex items-center justify-center space-x-2 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isGenerating ? (
                <>
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                  <span>ÁîüÊàê‰∏≠...</span>
                </>
              ) : (
                <>
                  <Sparkles className="w-5 h-5" />
                  <span>Ë®ò‰∫ã„ÇíÁîüÊàê</span>
                </>
              )}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};